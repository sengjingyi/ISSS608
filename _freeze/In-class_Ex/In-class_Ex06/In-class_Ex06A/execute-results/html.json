{
  "hash": "1b83c73b4a45d2ea579efa97e9022000",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 6 - Network\"\nauthor: \"Seng Jing Yi\"\ndate: \"May 11, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\nformat: html\neditor: visual\n---\n\n\n## Installing packages \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, \n               graphlayouts, ggforce, skimr, tidytext, tidyverse)\n```\n:::\n\n\n## Data import\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_data <- fromJSON(\"data/mc3.json\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extracting links \n\nmc3_edges <- as_tibble(mc3_data$links) %>%\n  distinct() %>%\n  mutate(source = as.character(source), \n         target = as.character(target), \n         type = as.character(type)) %>%\n  group_by(source, target, type) %>%\n  summarise(weights = n()) %>%\n  filter(source != target) %>%\n  ungroup()\n\n# convert to character for standardisation\n# filter to select out all distinct records, where source and target are different entity\n```\n:::\n\n\n::: callout-note\n## Things to note\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extracting nodes\nmc3_nodes <- as_tibble(mc3_data$nodes)\n\n# Managing the data types \nmc3_nodes <- as_tibble(mc3_data$nodes) %>%\n  mutate(country = as.character(country), \n         id = as.character(id), \n         ProductServices = as.character(ProductServices), \n         revenue = as.numeric(as.character(revenue)), \n         type = as.character(type)) %>%\n  select(id, country, type, revenue, ProductServices)\n```\n:::\n\n\nEnsuring node and links are consistent naming - Extract out nodes from the edges to ensure consistency\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid1 <- mc3_edges %>%\n  select(source) %>%\n  rename(id = source)\n\nid2 <- mc3_edges %>%\n  select(target) %>% \n  rename(id = target)\n\nmc3_nodes1 <- rbind(id1, id2) %>%   \n  distinct() %>%   \n  left_join(mc3_nodes, by = c(\"id\" = \"id\")) %>%   \n  mutate(unmatched = \"drop\")\n  \n#doing left join to match, drop everything else that cannot be matched\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_graph <- tbl_graph(nodes = mc3_nodes1, \n                       edges = mc3_edges, \n                       directed = FALSE) %>%\n  mutate(betweenness_centrality = centrality_betweenness(), \n         closeness_centrality = centrality_closeness())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# displayig graph model\nView(mc3_graph)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## trimming the graph with 100,000 vs 300,000\n## modify with the network statistics - Filter \n\nmc3_graph %>%\n  filter(betweenness_centrality >= 100000) %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = 0.5)) +\n  geom_node_point(aes(size = betweenness_centrality, color = \"lightblue\", \n                      alpha = 0.5)) +\n  scale_size_continuous(range = c(1, 10)) +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06A_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# considering bigger centrality \nmc3_graph %>%\n  filter(betweenness_centrality >= 3000000) %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = 0.5)) +\n  geom_node_point(aes(size = betweenness_centrality, color = \"lightblue\", \n                      alpha = 0.5)) +\n  scale_size_continuous(range = c(1, 10)) +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06A_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Exploring the nodes data frame\n\nIn the cod chunk below,\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "In-class_Ex06A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}