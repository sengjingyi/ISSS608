{
  "hash": "dd016300aaea566dd9b7de902f4b37de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3 - Exploratory Data Analysis\"\nauthor: \"Seng Jing Yi\"\ndate: \"May 18, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: false\n  echo: true\n  warning: false\n  freeze: true\neditor: visual\n\nformat:\n  html:\n    code-fold: true\n---\n\n\n# Exploring Vast Challenge 2024 - Mini-challenge 2\n\n## 1. Introduction:\n\n### 1.1 Setting the scene:\n\nFishEye has learned that SouthSeafood Express Corp has been caught fishing illegally. The scandal caused a major disruption in the close-knit fishing community. FishEye has been collecting data on ship movements and shipping records in hopes that they could assemble a cohesive store of knowledge that will allow them to better understand local commercial fishing behavior.\n\n### 1.2 Key Objectives of this assignment:\n\nFishEye analysts need help to perform geographic and temporal analysis of the CatchNet data so they can prevent illegal fishing from happening again. This assignment will focus on sub-questions 1 & 4, namely:\n\n+--------+----------------------------------------------------------------------------------------------------------------------------------------------------+-------------------+\n| Sub-qn | Objectives                                                                                                                                         | Techniques used   |\n+========+====================================================================================================================================================+===================+\n| 1      | Visualization system to associate vessels with their probable cargos, including seasonality analysis to detect any anomalies in port exit records. |                   |\n+--------+----------------------------------------------------------------------------------------------------------------------------------------------------+-------------------+\n| 4      | Visualizing changes in fishing activities after SouthSeafood Express was caught.                                                                   | Temporal Analysis |\n+--------+----------------------------------------------------------------------------------------------------------------------------------------------------+-------------------+\n\n## 2. Data Import & Processing\n\n### 2.1 Loading relevant packages and data\n\n+----------------------------------------------+---------------------------------------------------------------------------------+\n| Packages Used                                | Purpose                                                                         |\n+==============================================+=================================================================================+\n| jsonlite, sf                                 | Importing JSON file and geojson for geographical data                           |\n+----------------------------------------------+---------------------------------------------------------------------------------+\n| tidyverse, lubridate, dplyr, readr, reshape2 | Data wrangling and reshaping in preparation for visualisation.                  |\n+----------------------------------------------+---------------------------------------------------------------------------------+\n| ggplot2, tidygraph, patchwork, sf            | Statistical graph and geographical plots with points and polygons.              |\n+----------------------------------------------+---------------------------------------------------------------------------------+\n| DT, igraph, ggraph, plotly, visNetwork       | For interactive graph and data table for user to drill down on area of interest |\n+----------------------------------------------+---------------------------------------------------------------------------------+\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load package\npacman::p_load(jsonlite, tidyverse, tidyr, \n               knitr, lubridate, dplyr, \n               igraph, ggraph, ggdist, ggplot2, \n               sf, tidygraph, reshape2, readr,\n               DT, patchwork,plotly)\n\n# load data\nmc2_data <- fromJSON(\"data/mc2.json\")\noceanus_geog = st_read(\"data/Oceanus Geography.geojson\") %>% st_transform(crs = 4326)\n```\n:::\n\n\n### 2.2. Data Cleaning\n\n*Reference: [Kickstarter 2](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter2) by Prof Kam*\n\n#### 2.2.1 Extracting edges & understanding edge tibble data table.\n\n1.  Extracting JSON file `edges` to tibble data frame and removing duplicates\n2.  Converting to the correct data types for datetime\n3.  Renaming columns starting with \"\\_ xx\\_\" to minimize downstream syntax errors.\n4.  Creating subsets of data tables based on column of \"type\"\n5.  Renaming of columns to provide context and unique identifiers for downstream data mapping.\n6.  Specifically for `tx_c`, adjustment of transaction date, T0 to T-1 as fish import generally leave harbor one day after delivery\n7.  Resultant data sets include:\n\n+------------------------------------+--------------------------------------------------------------------------------------------------------+\n| Resultant Edges Data Set           | Unique columns                                                                                         |\n+====================================+========================================================================================================+\n| Transactions (i.e., tx_c)          | Cargo_id, Destination, Transaction date, Fish species                                                  |\n+------------------------------------+--------------------------------------------------------------------------------------------------------+\n| Transponder Ping (i.e., E_Tping_c) | Start_time, Dwell, Ping source, Vessel_id                                                              |\n+------------------------------------+--------------------------------------------------------------------------------------------------------+\n| Habor Arrival Report (E_Hbrpt_c)   | Vessel_id, Port, Key, Arrival date, Port master, Aphorism, Holiday Greeting, Saying of the Sea, Wisdom |\n+------------------------------------+--------------------------------------------------------------------------------------------------------+\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#assigning to mc2_edges2\nmc2_edges <- as_tibble(mc2_data$links) %>% \n  distinct() \n\n#correcting data type - converting to date format\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$\"_last_edited_date\" <- as_datetime(mc2_edges$\"_last_edited_date\")\nmc2_edges$\"_date_added\" <- as_datetime(mc2_edges$\"_date_added\")\nmc2_edges$date <- as_datetime(mc2_edges$date)\n\n\n#renaming headers with \"_\" to prevent errors. \nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n#checking data format\n#glimpse(mc2_edges)\n\n# Breaking into subsets based on event category\nE_TransponderPing <- subset(mc2_edges,  mc2_edges$type == \"Event.TransportEvent.TransponderPing\")\nE_HarborRpt <- subset(mc2_edges,  mc2_edges$type == \"Event.HarborReport\")\nE_Tx <- subset(mc2_edges, mc2_edges$type == \"Event.Transaction\")\n\n# Dropping columns that are NULL and renaming variables to separate them\n\n# Transactions\nE_Tx_c <- E_Tx %>%\n  rename(\n  cargo_id = source, \n  dest = target,\n  tx_date = date) %>%\n  mutate(tx_date = tx_date -1) %>% # adjustment for records\n  select(-c(key, algorithm, `raw_source`, `type`, `data_author`, `aphorism`, `holiday_greeting`, `wisdom`, `saying of the sea`, `time`, `dwell`)) \n\n# Separating the fish species for the respective cargo \ntx_sub1 <- E_Tx_c[grep(\"^City of\", E_Tx_c$dest), ]\ntx_sub2 <- E_Tx_c[!grepl(\"^City of\", E_Tx_c$dest), ]\ntx_sub2 <- tx_sub2 %>% rename(fish_species = dest)\n\ntx_c <- left_join(tx_sub1, tx_sub2 %>% select(cargo_id, fish_species), by = \"cargo_id\")\n\n# Dropping raw source: All Oceanus Centralized Export/Import Archive and Notatification Service (OCEANS)\n# Dropping algorithm: CatchMate ('arrrr' edition)\n# Null columns - Data author, aphorism, holiday_greeting, wisdom, saying of the sea, time, dwell\n\n# Transponder Ping\nE_Tping_c <- E_TransponderPing %>%\n  rename(vessel_id = target, \n         ping_source = source,\n         start_time = time) %>%\n  select(-c(key, `algorithm`, `raw_source`, `type`, `date`, `data_author`, `aphorism`, `holiday_greeting`, `wisdom`, `saying of the sea`)) \n\n#Dropping raw_source: All Oceanus Vessel Locator System\n#Dropping algorithm: All OVLS-Catch&Hook\n# Null columns - Date, Data author, aphorism, holiday_greeting, wisdom, saying of the sea\n\n# Habour Report\nE_Hbrpt_c <- E_HarborRpt %>% rename(\n  vessel_id = source, \n  port = target, \n  arr_date = date, \n  port_master = data_author, \n  saying = `saying of the sea`\n) %>%\n  select(-c(`algorithm`, `type`, `time`, `dwell`)) \n\n#Dropping algorithm: All HarborReportMaster 3.11\n#Retain raw_source: Differing values depending on which Port / City\n\nrm(tx_sub1, tx_sub2, E_TransponderPing,  E_HarborRpt, E_Tx, mc2_edges, E_Tx_c)\n```\n:::\n\n\n#### 2.2.2 Extracting nodes & understanding nodes tibble data table.\n\nRepeating similar steps for `nodes` records, we obtained the following resultant data set. To minimize the number of data sets, we appended nodes information on vessels and region into a combined data set, with an assigned label to identify it's category. (e.g., vessel_type)\n\n+------------------------------------------+--------------------------------------------------------------------------------------------+\n| Resultant Nodes Data Sets                | Unique Columns                                                                             |\n+==========================================+============================================================================================+\n| N_fish (Fishes and their description)    | Fish_id, fish species                                                                      |\n+------------------------------------------+--------------------------------------------------------------------------------------------+\n| N_Delivery_Doc (Cargo and details)       | Cargo_id, quantity in tons, delivery date                                                  |\n+------------------------------------------+--------------------------------------------------------------------------------------------+\n| N_vessel (Vessels and their description) | Vessel_id, vessel name, vessel company, flag country, tonnage, overall length, vessel type |\n+------------------------------------------+--------------------------------------------------------------------------------------------+\n| Location_legend (Point, City, Region)    | Area, activities, kind, fish_species                                                       |\n+------------------------------------------+--------------------------------------------------------------------------------------------+\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#segmenting nodes data and checking for distinct records\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\n\n#renaming to remove the \"_\" \nmc2_nodes <- mc2_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n#tidying the text data to remove nested list.\n\nmc2_nodes_tidied <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n\nmc2_nodes_tidied <- mc2_nodes_tidied %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n\n# Creating subset on nodes information\nN_fish <- subset(mc2_nodes_tidied,  mc2_nodes_tidied$type == \"Entity.Commodity.Fish\") %>%\n  select_if(~ !any(is.na(.))) %>% \n  select(-c(`type`, `raw_source`, `algorithm`, `Activities`, `fish_species_present`)) %>%\n  rename(fish_species = name, \n         fish_id = id)\n\nNL_City <- subset(mc2_nodes_tidied,  mc2_nodes_tidied$type == \"Entity.Location.City\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `type`, `fish_species_present`)) %>%\n  rename(city_name = Name, \n         city_id = id)\n\n\nNL_Point <- subset(mc2_nodes_tidied,  mc2_nodes_tidied$type == \"Entity.Location.Point\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `kind`, `fish_species_present`)) %>%\n  rename(point_name = Name, \n         point_id = id)\n\n## Need to tidy NL Region\nNL_Region <- subset(mc2_nodes_tidied,  mc2_nodes_tidied$type == \"Entity.Location.Region\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`raw_source`, `algorithm`, `type`, `Description`)) %>%\n  rename(region_name = Name, \n         region_id = id, \n         region_kind = kind)\n\nN_Delivery_doc <- subset(mc2_nodes_tidied,  mc2_nodes_tidied$type == \"Entity.Document.DeliveryReport\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  rename(deliver_date = date,\n         cargo_id = id) %>%\n  select(-c(`algorithm`, `type`, `raw_source`, `Activities`, `fish_species_present`)) \n\n## consider adding back more columns, it dropped some columns where values were partial NA\n\nN_vessel <- mc2_nodes_tidied %>%\n  filter(grepl(\"Entity.Vessel\", type)) %>%\n  mutate(vessel_type = case_when(\n    grepl(\"FishingVessel\", type, ignore.case = TRUE) ~ \"Fishing\",\n    grepl(\"Ferry.Passenger\", type, ignore.case = TRUE) ~ \"Ferry_Passenger\",\n    grepl(\"Ferry.Cargo\", type, ignore.case = TRUE) ~ \"Ferry_Cargo\",\n    grepl(\"Research\", type, ignore.case = TRUE) ~ \"Research\", \n    grepl(\"Other\", type, ignore.case = TRUE) ~ \"Other\", \n    grepl(\"Tour\", type, ignore.case = TRUE) ~ \"Tour\", \n    grepl(\"CargoVessel\", type, ignore.case = TRUE) ~ \"Cargo_Vessel\"\n    )) %>% \n  mutate(company = ifelse(is.na(company), \"Unknown\", company)) %>% # Handle NA values by replacing NA with unknown\n  select(-c(`algorithm`, `type`, `raw_source`, `Activities`, `fish_species_present`, `Description`, `kind`, `style`, `name`, `qty_tons`,`date`)) %>%\n  rename(vessel_id = id, \n         vessel_name = Name, \n         vessel_company = company)\n\n\n# Further exploring records where there is null values\npartial_na_records <- N_vessel[!complete.cases(N_vessel), ] %>% \n    select(-c(last_edited_by, date_added, last_edited_date)) \n\npartial_na_sum <- partial_na_records %>% \n  group_by(vessel_type) %>% \n  summarize(count = n()) \n\n# Plot NA records\npartial_na_plot <- ggplot(partial_na_sum, aes(x = vessel_type, y = count)) + \n  geom_bar(stat = \"identity\", fill = \"lightblue\") + \n  geom_text(aes(label = count), vjust = -0.2, size = 4) + \n  labs(title = \"Breakdown of vessel type for partial NA records\", \n       x = \"Vessel Type\",\n       y = \"Count of vessel with NA\") + theme_minimal(base_size = 12) + \n  theme(axis.line = element_line(color = \"black\"))\n\npartial_na_plot\n\n# Display partial na records\ndatatable(partial_na_records, \n          options = list(pageLength = 5)) \n\n# merging ping with location details (region_id, city_id, point_id)\n## See how to deal with list within activites, and how to include region_kind\n## See if want to retain some description to identify point, region vs city\n\ncity_legend <- NL_City %>% \n  select(c(`city_id`, `Activities`, `kind`)) %>%\n  mutate(fish_species_present = \"NA\") %>%\n  rename(area = city_id)\n\npoint_legend <- NL_Point %>% \n  select(c(`point_id`, `Activities`))  %>%\n  mutate(kind = \"point\", \n         fish_species_present = \"NA\") %>%\n  rename(area = point_id)\n\nregion_legend <- NL_Region %>% \n  select(c(`region_id`, `Activities`, `region_kind`, `fish_species_present`))  %>%\n  rename(area = region_id, kind = region_kind)\n\nlocation_legend <- rbind(city_legend, point_legend, region_legend) \n\nwrite_csv(N_vessel, \"data/N_vessel.csv\")\nwrite_csv(location_legend, \"data/location_legend.csv\")\n\n#dropping unnecessary tables\nrm(mc2_data, mc2_nodes_tidied, partial_na_records, city_legend, point_legend, region_legend, partial_na_sum, partial_na_plot, mc2_nodes)\n```\n:::\n\n\n[**Insights:**]{.underline}\n\n-   Total of 18 vessels with partial NA\n-   All vessel company is \"Unknown\", belonging to Oceanus (flag_country = Oceanus)\n-   All 18 vessels fall under non fishing and non cargo_vessel type, hence, they will be excluded from our analysis.\n\n#### 2.2.5 Merging back the data after processing.\n\nTo incorporate context of the nodes details into the various edges, the related description of the nodes were appended to edge data sets. This helped to streamline the records into 3 consolidated data sets.\n\n+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+\n| Consolidated Data Set                                                                     | Resultant Edge Data Set                                                                                             | Mapped with Nodes Data Set                                                                             |\n+===========================================================================================+=====================================================================================================================+========================================================================================================+\n| Transaction (with cargo weight)                                                           | `tx_c`: Cargo_id, Destination, Transaction date, Fish species                                                       | `N_delivery_doc`: Cargo_id, quantity in tons, delivery date                                            |\n+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+\n| Ping activity (with vessel details by vessel_id, possible fish caught by location_legend) | `E_Tping_c`: Start_time, Dwell, Ping source, Vessel_id                                                              | `N_vessel`: Vessel_id, vessel name, vessel company, flag country, tonnage, overall length, vessel type |\n|                                                                                           |                                                                                                                     |                                                                                                        |\n|                                                                                           |                                                                                                                     | `location_legend`: Area, activities, kind, fish_species                                                |\n+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+\n| Habor Arrival Report\\                                                                     | `E_Hbrpt_c`: Vessel_id, Port, Key, Arrival date, Port master, Aphorism, Holiday Greeting, Saying of the Sea, Wisdom | `N_vessel`: Vessel_id, vessel name, vessel company, flag country, tonnage, overall length, vessel type |\n| (with vessel details)                                                                     |                                                                                                                     |                                                                                                        |\n+-------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# merging the quantity from delivery_doc with transaction based on cargo id\ntx_qty <- left_join(tx_c, N_Delivery_doc %>% select(cargo_id, qty_tons, deliver_date), by = \"cargo_id\")\n\n# Merging habor report with vessel details to identify type of vessel, tonnage and overall length \n\nE_Hbrpt_v <- left_join(E_Hbrpt_c, N_vessel %>% select(vessel_id, vessel_name, tonnage, length_overall, flag_country, vessel_company, vessel_type), by = \"vessel_id\")\n\n# Merging ping transaction with the location type\nE_Tping_c2 <- E_Tping_c %>% rename(area = ping_source)\nping_activity <- left_join(E_Tping_c2, location_legend %>% select(area, Activities, kind, fish_species_present), by = \"area\")\nping_activity <- left_join(ping_activity, N_vessel %>% select(vessel_id, vessel_name, tonnage, length_overall, flag_country, vessel_company, vessel_type), by = \"vessel_id\")\n\n# removing \"City of\" from the \"area column\" \nvessel_movement <- ping_activity %>%\n  mutate(area = gsub(\"^City of\", \"\", area)) %>%\n  mutate(area = gsub(\"^\\\\s+\", \"\", area))\n\nwrite_csv(tx_qty, \"data/tx_qty.csv\")\nwrite_csv(ping_activity, \"data/ping_activity.csv\")\nwrite_csv(E_Hbrpt_v, \"data/hbrpt.csv\")\n\nrm(tx_c, E_Tping_c2, E_Tping_c, E_Hbrpt_c)\n```\n:::\n\n\n## 3. Exploratory Data Analysis\n\n#### 3.0 Understanding areas in Oceanus\n\n*Reference: [Kickstarter 3](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter3#overview) by Prof Kam*\n\n1.  Import ESRI layer including the centriod details of geographical areas.\n2.  Extract coordinates from geographical data frame and appending to vessel movement data frame to plot the movement of vessels.\n3.  Filter the vessels of interest to the vessels belonging to \"South Seafood Express Corp\" and plot the routes taken by the 2 vessels, namely \"\"Snapper Snatcher7be\", \"Roach Robberdb6\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic plot of underlying geography (polygons, points)\n# ggplot(data = oceanus_geog) + geom_sf()\n# write_rds(oceanus_geog, \"data/rds/OceanusGeography.rds\")\n\nOceanusLocations <- st_read(dsn = \"data/shp\",\n  layer = \"Oceanus Geography\")\n\nwrite_rds(OceanusLocations, \n  \"data/rds/OceanusLocations.rds\")\n\n# extract coordinates from df\ncoords <- st_coordinates(OceanusLocations)\n\n# drop geometry columns\nOceanusLocations_df <- OceanusLocations %>%\n  st_drop_geometry()\n\n# append x and y coordinates into df as columns\nOceanusLocations_df$XCOORD <- coords[, \"X\"]\nOceanusLocations_df$YCOORD <- coords[, \"Y\"]\n\n# tidy df by renaming column \nOceanusLocations_df <- OceanusLocations_df %>%\n  select(Name, X.Kind, XCOORD, YCOORD) %>%\n  rename(Loc_Type = X.Kind)\n\n# left join to append back to vessel movement \n\nvessel_movement <- vessel_movement %>%\n  left_join(OceanusLocations_df,\n            by = c(\"area\" = \"Name\"))\n\n# save file as vessel_movement_data.data.frame\n\nwrite_rds(vessel_movement, \"data/rds/vessel_movement_data.rds\")\n\n# convert vessel movement data.frame into sf point data.frame \nvessel_movement_sf <- vessel_movement %>%\n  st_as_sf(coords = c(\"XCOORD\", \"YCOORD\"), \n           crs = 4326)\n\n# arrange record based on vessel name and navigation time \nvessel_movement_sf <- vessel_movement_sf %>%\n  arrange(vessel_id, start_time)\n\n# convert vessel movement sf from point into linestring features known as vessel trajectory\nvessel_trajectory <- vessel_movement_sf %>%\n  group_by(vessel_id) %>%\n  summarize(do_union = FALSE) %>%\n  st_cast(\"LINESTRING\")\n\n## include placeholder for vessel of interest and colors assigned\n\nvessels_of_interest <- c(\"snappersnatcher7be\", \"roachrobberdb6\")\nvessel_colors <- c(\"snappersnatcher7be\" = \"red\", \"roachrobberdb6\" = \"purple\")\n\n# creating route for selected vessel \nvessel_trajectory_selected <- vessel_trajectory %>%\n  filter(vessel_id %in% vessels_of_interest)\n\n# defining colors for X.kind\n\nkind_colors <- c(\n  \"Island\" = \"beige\", \n  \"Fishing Ground\" = \"lightblue\", \n  \"Ecological Preserve\" = \"lightgreen\", \n  \"city\" = \"purple\", \n  \"buoy\" = \"blue\")\n\nggplot() +\n  geom_sf(data = oceanus_geog, aes(fill = X.Kind), color = \"black\") +\n  scale_fill_manual(values = kind_colors) + \n  geom_sf(data = vessel_trajectory_selected, \n          aes(color = vessel_id), \n          size = 1) +\n  scale_color_manual(values = vessel_colors) + \n  geom_text(data = OceanusLocations_df, \n            aes(x = XCOORD, y = YCOORD, label = Name), \n            size = 2, hjust = 1, vjust = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of South Seafood Express Corp\", \n       x = \"Longitude\", y = \"Latitude\", color = \"Vessel ID\")\n```\n:::\n\n\n#### 3.1 Understanding possible fish species and signs of illegal fishing\n\n::: callout-note\n## Insights\n\n-   3 fish species are only present in ecological reserves: (1) Offidiaa/Piscis osseus, (2) Sockfish/Pisces foetida and (3) Helenaa/Pisces satis.\n-   Hence, any cargo with these fish species have likely violated fishing regulations and fished in ecological reserves. (1) Don Limpet Preserve, (2) Ghoti Preserve and (3) Nemo Reefs.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Formatting region data to identify fish type in region\nregion_species <- NL_Region %>%\n  mutate(fish_species_present = gsub('c\\\\(|\\\\)|\"', \"\", fish_species_present), \n    fish_species_present = strsplit(as.character(fish_species_present), \", \")) %>%\n  unnest(fish_species_present) %>%\n  mutate(presence = 1) %>%\n  spread(key = fish_species_present, value = presence, fill = 0)\n\nregion_species_c <- region_species %>% \n  select( -region_id, -last_edited_by, -last_edited_date, -date_added)\n\nkable(region_species_c)\n\n#Aligning the naming convention for fish species\n\nregion_species_id <- region_species %>% rename(\n  gadusnspecificatae4ba = `Cod/Gadus n.specificatae`, \n  piscesfrigus900 = `Birdseye/Pisces frigus`, \n  piscesfoetidaae7 = `Sockfish/Pisces foetida`, #illegal\n  labridaenrefert9be = `Wrasse/Labridae n.refert`, \n  habeaspisces4eb = `Beauvoir/Habeas pisces`, \n  piscissapidum9b7 = `Harland/Piscis sapidum`, \n  thunnininveradb7 = `Tuna/Thunnini n.vera`, \n  piscisosseusb6d = `Offidiaa/Piscis osseus`, #illegal\n  piscessatisb87 = `Helenaa/Pisces satis`) #illegal\n\n# write_csv(region_species, \"species_region_id.csv\")\n\n# Location of Salmon not identified (Extra value of Salmon in Fish node)\n# Check what to do with cargos with salmon - oncorhynchusrosea790\n\n# identifying occurence of illegal fish species at various port - identifying all unique fish species in cargo report (tx_qty)\n\nunique_fish_cargo <- unique(tx_qty$fish_species)\nunique_fish_cargo\n\n## assign specific colors to fish species, red for illegal. \n\nfish_species_color <- c(\"piscesfoetidaae7\" = \"#FF6666\", \n                        \"piscisosseusb6d\" = \"#FF9999\", \n                        \"piscessatisb87\" = \"#FFCCCC\", \n                        \"gadusnspecificatae4ba\" = \"#CCE5FF\", \n                        \"piscissapidum9b7\" = \"#99CCFF\", \n                        \"habeaspisces4eb\" = \"#66B2ff\", \n                        \"piscesfrigus900\" = \"#CCE5FF\", \n                        \"oncorhynchusrosea790\" = \"#FFFF99\", \n                        \"labridaenrefert9be\" = \"#99CCFF\", \n                        \"thunnininveradb7\" = \"#66b2ff\"\n                        )\n\n# Summarise total tons of fish per location\ntotal_qty_tons_per_dest <- tx_qty %>%\n  group_by(dest, fish_species) %>%\n  summarize(total_qty_tons = sum(qty_tons, na.rm = TRUE)) %>%\n  ungroup()\n\n# Reordering levels for fish species for tidier plot\ntotal_qty_tons_per_dest$fish_species <- factor(\n  total_qty_tons_per_dest$fish_species, \n  levels = c(\"gadusnspecificatae4ba\", \"piscissapidum9b7\", \"habeaspisces4eb\", \n             \"piscesfrigus900\", \"labridaenrefert9be\", \"thunnininveradb7\", \n             \"oncorhynchusrosea790\", # unidentified - Salmon\n             \"piscesfoetidaae7\",\"piscisosseusb6d\", \"piscessatisb87\" )) #illegal\n\n# Plot\nggplot(total_qty_tons_per_dest, aes(x = dest, y = total_qty_tons, fill = fish_species)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = fish_species_color) +\n  labs(title = \"Total Quantity of Fish by Destination and Species\",\n       x = \"Destination\",\n       y = \"Total Quantity (tons)\",\n       fill = \"Fish Species\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n:::\n\n\n#### 3.2. Nodes on Vessels - Understanding network of vessels in relation to companies\n\n#### Exploring vessel tonnage by type and company\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Defining vessel colors \nvessel_colors <- c(\"Fishing\" = \"#00CCCC\", \n    \"Cargo_Vessel\" = \"#994C00\", \n    \"Ferry_Cargo\" = \"#C0C0C0\", \n    \"Ferry_Passenger\" = \"#C0C0C0\",\n    \"Research\" = \"#C0C0C0\",\n    \"Tour\" = \"#C0C0C0\", \n    \"Other\" = \"#C0C0C0\")\n\n#unique(N_vessel$vessel_type)\n\nscatter_ton_len <- ggplot(data= N_vessel, \n            aes(x= tonnage, \n                y= length_overall, \n                color= vessel_type)) +\n  geom_point() + \n  scale_color_manual(values = vessel_colors) + \nlabs(title = \"Scatter Plot of Vessels by Size\", \nx = \"Vessel Tonnage\", \ny = \"Vessel Length\") + \n  theme_minimal(base_size = 8) + \n  theme(legend.position = \"top\", \n        axis.line = element_line(color = \"black\"))\n\nvessel_count <- N_vessel %>%\n  group_by(vessel_type) %>%\n  summarize(vessel_no = n()) %>% \n  mutate(vessel_type = reorder(vessel_type, - vessel_no))\n\n\nbar_vessel_type <- ggplot(data = vessel_count, \n                          aes(x = vessel_type, \n                              y = vessel_no, fill = vessel_type)) + \n  geom_bar(stat = \"identity\") + \n  scale_fill_manual(values = vessel_colors) + \n  geom_text(aes(label = vessel_no), vjust = -0.8, size = 2) +\n  labs(title = \"Count of Vessels by Type\", \nx = \"Type of vessels registered\", \ny = \"No. of vessels\") + \n  theme_minimal(base_size = 8) + \n  theme(axis.text.x = element_text(size = 5), \n        axis.line = element_line(color = \"black\")) \n\nscatter_ton_len | bar_vessel_type\n\nrm(scatter_ton_len, bar_vessel_type, vessel_count)\n```\n:::\n\n\nUnderstanding ownership of vessels\n\nInsights: 98 company with only 1 type of ship, only Saltwater Sisters Company Marine has 2 types of vessel, vessels of other vessel_types belong to \"Unknown\" companies\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_per_company <- N_vessel %>% \n  group_by(vessel_company, vessel_type) %>% \n  summarise(vessel_count = n()) %>% \n  arrange(vessel_count)\n\nvessel_type_per_company <- vessel_per_company %>% \n  group_by(vessel_company) %>% \n  summarise(vessel_type_count = n()) %>% \n  arrange(vessel_type_count)\n\n# Hence for plot, we will focus on vessel_type = \"fishing\" and \"cargo_vessel\"\nlibrary(data.table)\nlibrary(ggrepel)\n\nfish_vessel <- vessel_per_company %>% filter(vessel_type == \"Fishing\") %>% as.data.table\nfish_vessel_sum <- fish_vessel[, .(company_count = .N, company_names = toString(vessel_company)), by = vessel_count]\n\n#enforcing all x axis values for clearer depiction by introducing breaks\nfish_v_count_range <- seq(min(fish_vessel_sum$vessel_count), max(fish_vessel_sum$vessel_count))\n\n# introduce wrap text function to limit company name within the column\nwrap_text <- function(text, width = 15) {\n  sapply(text, function(x) {\n    paste(strwrap(x, width = width), collapse = \"\\n\")\n  })\n}\n\n# applying to column\nfish_vessel_sum$wrapped_company_names <- wrap_text(fish_vessel_sum$company_names)\n\n# creating plot\ncompany_vessel_count <- ggplot(fish_vessel_sum, aes(x = vessel_count, y = company_count)) +\n  geom_bar(stat = \"identity\", fill = \"#00CCCC\", color = \"black\") +\n  geom_text(aes(label = company_count), vjust = -0.5, size = 3) +\n  scale_x_continuous(breaks = fish_v_count_range) +\n  labs(title = \"No. of fishing vessels Owned by companies\",\n       x = \"Number of Vessels Owned\",\n       y = \"Count of Companies\") +\n  theme_minimal(base_size = 8) + \n  theme(axis.line = element_line(color = \"black\"))+ \n\n# including annotation ()\n annotate(\"rect\", xmin = 3.5, xmax = 6.5, ymin = 0, ymax = Inf, \n           alpha = 0, color = \"#FFBF00\", fill = NA) +\n\n annotate(\"text\", x = 6, y = 5, label = \"Ritter Ltd\", size = 2) +\n  annotate(\"text\", x = 4, y = 20, label = \"McCormick Group,\\nNielsen,\\nValentine and Bell,\\nRobinson,\\nMcMillan and Watson,\\nSolis-Lopez\", size = 2)\n```\n:::\n\n\nHence we will visualise the mapping of company to vessels for company that owns 3 or more vessels. (No of vessels of interest is adjustable)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# creating subset\nno_of_interest = 4\ncompany_of_interest <- fish_vessel %>% filter(vessel_count >= no_of_interest)\n\nint_fish_v_mapping <- N_vessel %>% filter(vessel_company %in% company_of_interest$vessel_company) %>% select(vessel_id, vessel_company, tonnage)\n\n# data wrangling to fit into network graph\nedges <- int_fish_v_mapping %>%\n  select(vessel_id, vessel_company)\n\n# Create nodes for vessels\nnodes <- int_fish_v_mapping %>%\n  select(vessel_id, tonnage) %>%\n  distinct() %>%\n  rename(name = vessel_id) %>%\n  mutate(type = \"vessel\")\n\n# Create nodes for companies\ncompany_nodes <- data.frame(name = unique(int_fish_v_mapping$vessel_company)) %>%\n  mutate(type = \"company\")\n\n# Combine nodes\nall_nodes <- bind_rows(nodes, company_nodes)\n\n# Create the graph object using igraph\nnetwork <- graph_from_data_frame(d = edges, vertices = all_nodes, directed = FALSE)\n\n# Add tonnage as a vertex attribute, ensuring NA values are handled\nV(network)$tonnage <- ifelse(is.na(V(network)$tonnage), 0, V(network)$tonnage)\n\n# Add node type as a vertex attribute\nV(network)$type <- all_nodes$type\n\n# Plot the network graph using ggraph\nmap_vessel_company <- ggraph(network, layout = 'fr') +\n  geom_edge_link(aes(edge_alpha = 0.5), show.legend = FALSE) +\n  geom_node_point(aes(size = tonnage, color = type), show.legend = TRUE) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2) +\n  scale_color_manual(values = c(\"vessel\" = \"#00CCCC\", \"company\" = \"black\")) +\n  theme_void(base_size = 8) +\n  labs(title = \"Network Graph of Vessels and Companies\",\n       size = \"Tonnage\",\n       color = \"Node Type\") + theme(legend.position = \"bottom\")\n\ncompany_vessel_count | map_vessel_company\n\n# cleaning environment\nrm(no_of_interest, company_of_interest, int_fish_v_mapping, edges, nodes, company_nodes, all_nodes, network, map_vessel_company)\n```\n:::\n\n\nFocusing on Fishing vessels and Cargo vessels, identifying the distribution of ships and companies owning this ship\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# segmenting data set to focus on fishing and cargo vessels \n\nfishing_v <- N_vessel %>% filter(vessel_type == \"Fishing\")\ncargo_v <- N_vessel %>% filter(vessel_type == \"Cargo_Vessel\")\n\n# calculating the quantiles for the respective vessel type \n\nfishing_v_ton_quant <- fishing_v %>%\n  summarise(\n    q25 = quantile(tonnage, 0.25),\n    median = median(tonnage),\n    q75 = quantile(tonnage, 0.75)\n  )\n\ncargo_v_ton_quant <- cargo_v %>%\n  summarise(\n    q25 = quantile(tonnage, 0.25),\n    median = median(tonnage),\n    q75 = quantile(tonnage, 0.75)\n  )\n\n# plot for fishing vessel distribution of tonnage\nfishing_v_dist <- ggplot(fishing_v, aes(x = tonnage)) +\n  geom_histogram(binwidth = 500, fill = \"#00CCCC\", color = \"black\") +\n  annotate(\"rect\", xmin = 12500, xmax = Inf, ymin = -Inf, ymax = Inf, \n    alpha = 0, color = \"#FFBF00\") +\n  geom_vline(aes(xintercept = fishing_v_ton_quant$q25), \n    color = \"blue\", linetype = \"dashed\") +\n  geom_vline(aes(xintercept = fishing_v_ton_quant$median),\n   color = \"red\", linetype = \"dashed\") +\n  geom_vline(aes(xintercept = fishing_v_ton_quant$q75), \n    color = \"blue\", linetype = \"dashed\") +\n  annotate(\"text\", x = fishing_v_ton_quant$q25, y = 30, \n    label = paste(\"25%\", fishing_v_ton_quant$q25) , vjust = -1, size = 3) +\n  annotate(\"text\", x = fishing_v_ton_quant$median, y = 30, \n    label = paste(\"50%\",fishing_v_ton_quant$median), vjust = -1, size = 3) +\n  annotate(\"text\", x = fishing_v_ton_quant$q75, y = 30, \n    label = paste(\"75%\", fishing_v_ton_quant$q75),  vjust = -1, size = 3) + \n  labs(title = \"Distribution of Fishing Vessels by Tonnage\",\n       x = \"Tonnage\",\n       y = \"Frequency\") +\n  theme_minimal(base_size = 8) + \n  theme(axis.line = element_line(color = \"black\")) + \n  coord_flip()\n\n# Adjust label to readable format \n# Adjust order so that the text is above the \n\ncargo_v_dist <- ggplot(cargo_v, aes(x = tonnage)) +\n  geom_histogram(binwidth = 500, fill = \"#994C00\", color = \"black\") +\n annotate(\"rect\", xmin = -Inf, xmax = 5000, ymin = -Inf, ymax = Inf, alpha = 0, color = \"#FFBF00\") +\n  annotate(\"rect\", xmin = 70000, xmax = Inf, ymin = -Inf, ymax = Inf, alpha = 0, color = \"#FFBF00\") +\n  geom_vline(aes(xintercept = cargo_v_ton_quant$q25), color = \"blue\", linetype = \"dashed\") +\n  geom_vline(aes(xintercept = cargo_v_ton_quant$median), color = \"red\", linetype = \"dashed\") +\n  geom_vline(aes(xintercept = cargo_v_ton_quant$q75), color = \"blue\", linetype = \"dashed\") +\n  annotate(\"text\", x = cargo_v_ton_quant$q25, y = 30, \n    label = paste(\"25%\", cargo_v_ton_quant$q25), vjust = -1, size = 3) +\n  annotate(\"text\", x = cargo_v_ton_quant$median, y = 30, \n    label = paste(\"50%\",cargo_v_ton_quant$median), vjust = -1, size = 3) +\n  annotate(\"text\", x = cargo_v_ton_quant$q75, y = 30, \n    label = paste(\"75%\", cargo_v_ton_quant$q75), vjust = -1, size = 3) +\n  labs(title = \"Distribution of Cargo Vessels by Tonnage\",\n       x = \"Tonnage\",\n       y = \"Frequency\") +\n  theme_minimal(base_size = 8) + \n  theme(axis.line = element_line(color = \"black\")) + \n  coord_flip()\n\n#summary(fishing_v) - min: 100, q1: 600, median: 2400, q3: 4850, max: 17200 - investigate\n#summary(cargo_v) - min: 2100, q1: 2100, median: 23750, q3: 74925, max: 76300 - Investigate \n\nfishing_v_dist | cargo_v_dist\n```\n:::\n\n\nInsights derived:\n\n1.  Exception size of fishing vessels (Vessels \\> 12,500 tons). Possible explanation: Fishing of different nature - to search further on types of fishing vessels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# understanding which vessel \nabn_fish_vessel <- fishing_v %>% filter(tonnage > 12500)\n\nsel_abn_fish_vessel <- abn_fish_vessel %>% \n  select(vessel_name, flag_country, vessel_company) \n\nkable(sel_abn_fish_vessel)\n\n# understanding region that vessel spends time at \n\nabn_fish_v_activity <- ping_activity %>% \n  filter(vessel_id %in% abn_fish_vessel$vessel_id) \n  \nabn_fish_v_activity_sum <- abn_fish_v_activity %>%\n  group_by(vessel_id, area) %>%\n  summarise(median_dwell = median(dwell, na.rm = TRUE))\n\n# Contrasting with the median time spent by fishing vessels \n\nfish_v_activity <- ping_activity %>% \n  filter(vessel_id %in% fishing_v$vessel_id) \n  \nfish_v_activity_sum <- fish_v_activity %>%\n  group_by(vessel_id, area) %>%\n  summarise(median_dwell = median(dwell, na.rm = TRUE))\n\n# kable(ETping_vessel)\n# Flag out vessels that entered restricted zone\n\nunique(fish_v_activity$area)\n\n# assigning order to the plot\nfish_v_activity$area <- factor(fish_v_activity$area, levels = c(\"Nav E\", \"Nav D\", \"Nav C\" , \"Nav B\", \"Nav A\" , \"Nav 3\", \"Nav 2\", \"Nav 1\", \"Ghoti Preserve\", \"Don Limpet Preserve\", \"Nemo Reef\", \"Cod Table\",\"Tuna Shelf\",\"Wrasse Beds\",\"Exit East\", \"City of South Paackland\", \"City of Paackland\",\"City of Lomark\",\"City of Himark\",\"City of Haacklee\",\"City of Port Grove\"))\n\n# annotate area labels by color \n\nfishing_dwell <- ggplot(fish_v_activity, aes(x = area, y = dwell)) +\nannotate(\"rect\", ymin = -Inf, ymax = Inf, xmin = 15.5 , xmax = 20.5, alpha = 0.8, fill = \"brown\") +    # Ports\n  annotate(\"rect\", ymin = -Inf, ymax = Inf, xmin = 11.5, xmax = 14.5, alpha = 0.8, fill = \"lightblue\") +  # Fishing ground\n  annotate(\"rect\", ymin = -Inf, ymax = Inf, xmin = 8.5, xmax = 11.5, fill = \"lightgreen\", alpha = 0.9) +  # Ecological preserve\n  annotate(\"rect\", ymin = -Inf, ymax = Inf, xmin = 0.5, xmax = 8.5, alpha = 0.8, fill = \"blue\") +\n  geom_boxplot() +\n  geom_point(data = subset(fish_v_activity, vessel_id == \"marinemarauder8c9\"),\n             aes(x = area, y = dwell), color = \"red\", size = 1) +\n  geom_point(data = subset(fish_v_activity, vessel_id == \"pikepirate89a\"),\n             aes(x = area, y = dwell), color = \"blue\", size = 1) +\n  theme_minimal(base_size = 8) +\n  labs(title = \"Median Dwell Time by Area\", \n       x = \"Area\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1), \n        axis.line = element_line(color = \"black\")) + \n  scale_y_continuous(limits = c(0, 600000)) + \n  coord_flip()  \n```\n:::\n\n\n2.  Wide variation of size for cargo vessels ( Grp 1: \\< 5000 tons, Grp 2: 75,000 \\> 5000 tons)\n\n    Observed that vessel company is unknown for all 39 records in group 1, and all unknown for all 33 records in group 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabn_cargo_vessel_s <- cargo_v %>% filter(tonnage < 5000)\nabn_cargo_vessel_l <- cargo_v %>% filter(tonnage > 70000)\n\nsel_abn_cargo_vessel_s <- abn_cargo_vessel_s %>% \n  select(vessel_name, flag_country, vessel_company) \n\nsel_abn_cargo_vessel_l <- abn_cargo_vessel_l %>% \n  select(vessel_name, flag_country, vessel_company) \n\n# display records \nkable(sel_abn_cargo_vessel_s)\nkable(sel_abn_cargo_vessel_l)\n\n# subset cargo vessel activity\ncargo_v_activity <- ping_activity %>% \n  filter(vessel_id %in% cargo_v$vessel_id) \n\n# extracting list of vessel id for large and small cargo\nselected_vessel <- abn_cargo_vessel_s$vessel_id\nselected_vessel2 <- abn_cargo_vessel_l$vessel_id\n\n# plotting\ncargo_dwell <- ggplot(cargo_v_activity, aes(x = area, y = dwell)) +\n  geom_boxplot() +\n  geom_point(data = subset(cargo_v_activity, vessel_id == selected_vessel),\n             aes(x = area, y = dwell), color = \"orange\", size = 1) +\n  geom_point(data = subset(cargo_v_activity, vessel_id == selected_vessel2),\n             aes(x = area, y = dwell), color = \"purple\", size = 1) +\n  theme_minimal(base_size = 8) +\n  labs(title = \"Median Dwell Time by Area\", \n       x = \"Area\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1), \n        axis.line = element_line(color = \"black\")) + \n  scale_y_continuous( limits = c(0, 20000)) + #zoom into 2 * 10^5\n  coord_flip()\n\nfishing_dwell | cargo_dwell\n```\n:::\n\n\nExploring ships from \"Unknown companies\" - Unregistered ships - Transhipment cargo vessel, only 1 registered with Oceanus, else others by nations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# exploring ships that have unknown companies\n\nunknown_v <- N_vessel %>% filter(vessel_company == \"Unknown\")\n\n# Summarizing to see where unknown vessels come from\nunknown_v_sum <- unknown_v %>% \n  group_by(vessel_type, flag_country) %>% \n  summarize(vessel_count = n()) %>%\n  mutate(flag_country = reorder(flag_country, - vessel_count))\n\nunknown_dist <- ggplot(unknown_v_sum, \n                       aes(x = flag_country, y = vessel_count, \n                           fill = vessel_type)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(title = \"Vessel Count by Flag Country and Vessel Type\",\n       x = \"Flag Country\",\n       y = \"Vessel Count\",\n       fill = \"Vessel Type\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 5)) \n\nunknown_dist \n\ndatatable(unknown_v_sum, \n          options = list(pageLength = 5), \n          filter = \"top\")\n\n# Identifying regions that unknown vessels are at \nunknown_v_list <- unknown_v$vessel_id\n\nvessel_dwell <- ggplot(ping_activity, aes(x = area, y = dwell)) +\n  geom_boxplot() +\n  geom_point(data = subset(ping_activity, vessel_id == unknown_v_list),\n             aes(x = area, y = dwell), color = \"hotpink\", size = 1) +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Area\", \n       x = \"Area\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  scale_y_continuous( limits = c(0, 500000)) + #zoom into 2 * 10^5\n  coord_flip()\n\nvessel_dwell\n\n# identifying outliers - nemo-reef > 2,000,000\n# identifying ships that are way above median and \"unknown\"\n```\n:::\n\n\n**Exploring the cargo records**\n\n-   Consistent record where qty_tons \\<=0 across all 5 cities\n\n-   However, variation in fish species where qty_tons \\<= 0 for cargo\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#exploring abnormal records where qty_tons of cargo delivered = 0 or is negative\n\nggplot(tx_qty, aes(x = fish_species, y = qty_tons)) + \n  geom_boxplot(\n    width = .15, \n    outlier.color = NA \n  ) +\n  ggdist::stat_dots(data = subset(tx_qty, qty_tons > 0),\n    side = \"right\", \n    justification = -0.2,\n    binwidth = 1, \n    dotsize = 0.15) + \n   ggdist::stat_dots(\n    data = subset(tx_qty, qty_tons <= 0),\n    side = \"right\",\n    justification = -0.2,\n    binwidth = 1,\n    dotsize = 0.15,\n    color = \"red\") + \n  geom_hline(yintercept = 0, color = \"blue\") + \n  coord_flip() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#exploring abnormal records where qty_tons of cargo delivered = 0 or is negative\n\nggplot(tx_qty, aes(x = dest, y = qty_tons)) + \n  geom_boxplot(\n    width = .15, \n    outlier.color = NA \n  ) +\n  ggdist::stat_dots(data = subset(tx_qty, qty_tons > 0),\n    side = \"right\", \n    justification = -0.2,\n    binwidth = 1, \n    dotsize = 0.15) + \n   ggdist::stat_dots(\n    data = subset(tx_qty, qty_tons <= 0),\n    side = \"right\",\n    justification = -0.2,\n    binwidth = 1,\n    dotsize = 0.15,\n    color = \"red\") + \n  geom_hline(yintercept = 0, color = \"blue\") + \n  coord_flip() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tx_qty, aes(x = fish_species, y = qty_tons)) + \n  geom_boxplot(\n    width = .15, \n    ## remove outliers\n    outlier.color = NA ## `outlier.shape = NA` or `outlier.alpha = 0` works as well\n  ) +\n  ## add dot plots from {ggdist} package\n  ggdist::stat_dots(\n    ## orientation to the right\n    side = \"right\", \n    justification = -0.2,\n    ## adjust grouping (binning) of observations \n    binwidth = 1, \n    dotsize = 0.1\n  ) +\n  ## add highlighted dots where qty_tons <= 0\n  ggdist::stat_dots(\n    data = subset(tx_qty, qty_tons <= 0),\n    side = \"right\",\n    justification = -0.2,\n    binwidth = 1,\n    dotsize = 0.1,\n    color = \"red\"\n  ) +\n  ## add horizontal line at qty_tons = 0\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"blue\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Quantity of Fish Species by Weight (Tons)\",\n       x = \"Fish Species\",\n       y = \"Quantity (Tons)\") +\n  theme(axis.text.x = element_text(hjust = 1, size = 7),\n    axis.text.y = element_text(size = 7),\n    plot.title = element_text(size = 12, face = \"bold\"),\n    strip.text = element_text(size = 7),\n    plot.margin = unit(c(1, 1, 1, 1), \"mm\"), \n    panel.spacing = unit(0.5,\"lines\")) + \n  facet_grid(. ~ dest)\n```\n:::\n\n\nComparing the visualisations together, we map to see the cumulative quantity of fishes received by each habor\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Goal: Interactive heat map\n# Zoom into specific date range, see the cargo_id for the contributing ports\n\n#plotting heatmap\n#step 1: calculate data\nqty_fish_dest_time <- tx_qty %>%\n  group_by(tx_date, dest, fish_species) %>%\n  summarize(total_qty_tons = sum(qty_tons, na.rm = TRUE)) %>%\n  ungroup()\n\n#step 2: reshape data for heatmap\n\nheatmap_data <- dcast(qty_fish_dest_time, tx_date + fish_species ~ dest, value.var = \"total_qty_tons\", fill = 0)\n\n# Melt data for ggplot2\nmelted_data <- melt(heatmap_data, id.vars = c(\"tx_date\", \"fish_species\"))\n\n# step 3:  Plot the heatmap\nggplot(melted_data, aes(x = tx_date, y = fish_species, fill = value)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"red\", name = \"Total Qty (tons)\") +\n  labs(title = \"Heatmap of Fish Species Quantity at Each Destination Over Time\",\n       x = \"Transaction Date\",\n       y = \"Fish Species\") +\n  facet_wrap(~variable, scales = \"free_y\", ncol = 1) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n```\n:::\n\n\n#### 3.3 Understanding the network of companies and ports visited (Harbor report) / region (Tping)\n\n-   Understanding distribution of vessels in relation to paths taken\n\n-   Understanding breakdown of ships per port\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### See how to use the bottom\n## Drilling down into type of vessel - Hbrpt -> Type of vessel per port \nhb_v_count <- E_Hbrpt_v %>%\n  group_by(port, vessel_type) %>%\n  summarize(vessel_count = n()) \n\nvessel_count_plot <- ggplot(hb_v_count, aes(x = port, y = vessel_count, fill = vessel_type)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(data = hb_v_count, aes(label = vessel_count), hjust = -1, size = 5) + \nscale_fill_manual(values = vessel_colors) + \n  labs(title = \"Count of Vessel per Port\", x = \"Port\", \n       y = \"Number of Vessel\", fill = \"Vessel Type\") + \n  coord_flip()\n\n## Drilling down into type of cargo \n\n## Conclusion: Exclude City of Port Grove as it is stopping over for vessels - Research, Tour, Others and not for fishing or cargo. \n\n# Extracting details of vessels that stop at \"City of Port Grove\"\nport_grove_vessel <- E_Hbrpt_v %>% filter(port == \"City of Port Grove\")\nkable(port_grove_vessel)\n\n# reorder variables - cargo count, vessel count, fish p, cargo p\n# changing color of the plot - standardise vessel count, cargo count, then \n```\n:::\n\n\nExploring seasonality of the cargo count per period\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntx_dt <- tx_qty %>% \n  # select(-c(last_edited_by, last_edited_date, date_added)) %>% \n  arrange(dest, tx_date) %>%\n  select(dest, tx_date, cargo_id, fish_species, qty_tons)\n\n# return cargo_id\ndatatable(tx_dt, \n          options = list(pageLength = 10), \n          filter = \"top\")\n\n# plot heat map\ncargo_summary_month <- tx_qty %>%\n  group_by(dest, tx_date) %>%\n  summarize(cargo_count = n())\n\n\n\n# reshape data\ncargo_summary_reshape <- dcast(cargo_summary, tx_date ~ dest, value.var = \"cargo_count\", fill = 0)\n\n# Melt the data back to long format for ggplot\ncargo_summary_reshape2 <- melt(cargo_summary_reshape, id.vars = \"tx_date\", variable.name = \"dest\", value.name = \"cargo_count\")\n\n# Plot the heatmap\ncargo_ts <- ggplot(cargo_summary_reshape2, \n                        aes(x = tx_date, y = dest, fill = cargo_count)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"blue\") +\n  labs(title = \"Number of Cargo per Date at Each Harbor\",\n       x = \"Date\",\n       y = \"Harbor\",\n       fill = \"Cargo Count\")\n\nggplotly(cargo_ts)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHb_v_dt <- E_Hbrpt_v %>% \n  arrange(port, arr_date) %>%\n  select(port, arr_date, vessel_id, vessel_company)\n\ndatatable(Hb_v_dt, \n          options = list(pageLength = 10), \n          filter = \"top\")\n\nvessel_summary <- E_Hbrpt_v %>%\n  group_by(port, arr_date) %>%\n  summarize(vessel_count = n())\n\n# reshape data\nvessel_summary_reshape <- dcast(vessel_summary, arr_date ~ port, value.var = \"vessel_count\", fill = 0)\n\n# Check the reshaped data\nhead(vessel_summary_reshape)\n\n# Melt the data back to long format for ggplot\nvessel_summary_reshape2 <- melt(vessel_summary_reshape, id.vars = \"arr_date\", variable.name = \"port\", value.name = \"vessel_count\")\n\n# Check the melted data\nhead(vessel_summary_reshape2)\n\n# Plot the heatmap\nvessel_ts <- ggplot(vessel_summary_reshape2, \n                    aes(x = arr_date, y = port, fill = vessel_count)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"blue\") +\n  labs(title = \"Number of Vessels per Date at Each Harbor\",\n       x = \"Date\",\n       y = \"Harbor\",\n       fill = \"Vessel Count\")\n\nggplotly(vessel_ts)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# TBC\n```\n:::\n\n\nIncluding transponder ping data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Network analysis to see mapping of fish species delivered to which port at what quantity\n\nedges <- total_qty_tons_per_dest %>%\n  select(from = fish_species, to = dest, weight = total_qty_tons)\n\n# Create graph from data frame\ngraph <- graph_from_data_frame(edges, directed = FALSE)\n\n# Convert to tbl_graph object\ngraph_tbl <- as_tbl_graph(graph)\n\n# Plot the network graph using ggraph\nggraph(graph_tbl, layout = 'fr') + \n  geom_edge_link(aes(width = weight), alpha = 0.8) +\n  geom_node_point(aes(color = ifelse(name %in% edges$from, \"Fish Species\", \"Destination\")), size = 5) +\n  geom_node_text(aes(label = name), vjust = 1.5, hjust = 1.5) +\n  scale_edge_width(range = c(0.5, 5)) +\n  scale_color_manual(values = c(\"Fish Species\" = \"green\", \"Destination\" = \"blue\")) +\n  theme_void() +\n  labs(title = \"Network Analysis of Fish Species per Destination\", color = \"Node Type\", edge_width = \"Total Quantity (tons)\")\n```\n:::\n\n\n[Potential illegal activities:]{.underline}\n\n1.  Cargo_id with fish species of `piscisosseusb6d` and `piscesfoetidaae7` where both species only found in ecological reserves\n\nReference: <https://isss608-ay2023-haileycsy.netlify.app/take-home_ex/take-home_ex03/take-home_ex03>\n\n### 4.2 Sub-question 4 - How did fishing activity change after South Seafood Express Corp was caught.\n\nUnderstanding the sequence of event by understanding when South Seafood Express Corp was caught.\n\n1.  Identifying activity of vessels activity via calendar map\n2.  Zooming into last seen activity for South Seafood Express Corp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement <- vessel_movement %>%  \n  mutate(year = year(start_time),\n         month = month(start_time, label = TRUE),\n         day = day(start_time),\n         week = week(start_time),\n         weekday = wday(start_time, label = TRUE, week_start = 1))\n\n# unique(vessel_movement$area)\n# focus on specific areas \n\nselected_area <- c(\"Ghoti Preserve\", \"Wrasse Beds\", \"Nemo Reef\", \"Don Limpet Preserve\", \"Tuna Shelf\", \"Cod Table\")\n\nselected_port <- c(\"Haacklee\", \"Lomark\", \"Himark\", \"South Paackland\")\n  \nvessel_dist_count <- vessel_movement %>%\n  group_by(area, year, month, day) %>%\n  summarise(vessel_count = n_distinct(vessel_id)) %>% \n  filter(area %in% selected_area)\n\ncalendar_data <- expand.grid(year = unique(vessel_dist_count$year),\n                             month = unique(vessel_dist_count$month),\n                             day = 1:31, \n                             area = selected_area ) %>%\n  filter(!is.na(ymd(paste(year, month, day, sep = \"-\"))))\n\n# merging calendar grid with vessel count\ncalendar_data2 <- left_join(calendar_data, vessel_dist_count, by = c(\"year\", \"month\", \"day\", \"area\"))\n\n# sanitising by replacing NA with 0\ncalendar_data2$vessel_count[is.na(calendar_data2$vessel_count)] <- 0\n\n# plotting calendar chart \nggplot(calendar_data2, aes(x = day, y = month, fill = vessel_count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"blue\") +\n  facet_wrap(~ area ) +\n  labs(title = \"Calendar Map of Activities\",\n       x = \"Day\",\n       y = \"Month\",\n       fill = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Zooming into South Seafood Express Corp activity\n\nvessel_movement_ss <- vessel_movement %>% \n  filter(vessel_company == \"SouthSeafood Express Corp\") %>%\n  group_by(area, year, month, day) %>%\n  summarise(vessel_count = n_distinct(vessel_id))\n\n# Exploring where SS were at - Exclude Nav areas, and Exit \n# unique(vessel_movement_ss$area)\n\ncalendar_data_ss <- expand.grid(year = unique(vessel_movement_ss$year),\n                             month = unique(vessel_movement_ss$month),\n                             day = 1:31, \n                             area = vessel_movement_ss$area ) %>%\n  filter(!is.na(ymd(paste(year, month, day, sep = \"-\"))))\n\ncalendar_datass2 <- left_join(calendar_data_ss, vessel_movement_ss, by = c(\"year\", \"month\", \"day\", \"area\"))\n\n# sanitising by replacing NA with 0\ncalendar_datass2$vessel_count[is.na(calendar_datass2$vessel_count)] <- 0\n\n# plotting calendar chart \nggplot(calendar_datass2, aes(x = day, y = month, fill = vessel_count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"blue\") +\n  facet_wrap(~ area ) +\n  labs(title = \"Calendar Map of Activities\",\n       x = \"Day\",\n       y = \"Month\",\n       fill = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n## Check which year and last appearance date \n```\n:::\n\n\n\\\n[Pinpointing last activity of South Seafood Express Corp]{.underline}\n\n-   14 May 2035 for snappersnatcher7be at City of Lomark, Cod Table\n\n-   6 May 2035 for roachrobberdb6 for City of Himark, Cod Table, Wrasse Bed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nping_activity_ss <- ping_activity %>% \n  filter(vessel_company == \"SouthSeafood Express Corp\") %>% \n  mutate(date = as.Date(start_time)) %>% \n  select(date, vessel_id, area ) %>%\n  distinct()\n\ndatatable(ping_activity_ss, \n          options = list(pageLength = 5), \n          filter = \"top\")\n```\n:::\n\n\nAny new introduction of vessels after South Seafood Express was removed and date of first appearance.\n\n-   No new vessel added (N_vessel\\$date_added \\>= 2023-05) = NA\n-   No vessel amended (N_vessel\\$last_edited_date \\>= 2023-05) = yes - filter out to see (Salmon Snatcher)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Splitting dataframe to before and after SS was caught. \n\ndate_caught <- as.Date(\"2035-05-14\")\n\n\nfish_v_activity_bef <- fish_v_activity %>% \nmutate(start_date = as.Date(start_time)) %>%\nfilter(start_date <= date_caught)\n\nfish_v_activity_aft <- fish_v_activity %>% \nmutate(start_date = as.Date(start_time)) %>%\nfilter(start_date > date_caught)\n\n# plot dwell time bef and after \nfishing_dwell_aft <- ggplot(fish_v_activity_aft, aes(x = area, y = dwell)) +\n  geom_boxplot() +\n  geom_point(data = subset(fish_v_activity, vessel_id == \"snappersnatcher7be\"),\n             aes(x = area, y = dwell), color = \"red\", size = 1) +\n  geom_point(data = subset(fish_v_activity, vessel_id == \"roachrobberdb6\"),\n             aes(x = area, y = dwell), color = \"orange\", size = 1) +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Area\", \n       x = \"Area\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  scale_y_continuous(limits = c(0, 600000)) + # limit dwell \n  coord_flip()\n\n\nfishing_dwell_bef <- ggplot(fish_v_activity_bef, aes(x = area, y = dwell)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Median Dwell Time by Area\", \n       x = \"Area\", \n       y = \"Median Dwell Time\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  scale_y_continuous(limits = c(0, 600000)) + # limit dwell \n  coord_flip()\n\nfishing_dwell_bef | fishing_dwell_aft\n\n# check logic - why ss appears in aft plot \n\n# comparing median time spent at each area before and after\n\nfish_v_activity_bef_sum <- fish_v_activity_bef %>%\n  group_by(area) %>%\n  summarise(median_dwell = median(dwell, na.rm = TRUE))\n\nfish_v_activity_aft_sum <- fish_v_activity_aft %>%\n  group_by(area) %>%\n  summarise(median_dwell = median(dwell, na.rm = TRUE))\n\nfish_v_bef_aft <- left_join(fish_v_activity_bef_sum, fish_v_activity_aft_sum, by = c(\"area\" = \"area\"))\nfish_v_bef_aft <- fish_v_bef_aft %>% \n  rename(median_dwell_bef = median_dwell.x, median_dwell_aft = median_dwell.y) %>%\n  mutate(diff_bef_aft = median_dwell_bef - median_dwell_aft) %>% arrange(diff_bef_aft)\n\nggplot(fish_v_bef_aft, aes(x= area, y = diff_bef_aft)) + geom_bar(stat = \"identity\")\n\n# reorder variable such that group ecological preserves together and ports tgt (see direct contrast)\n# highlight color - shift from fishing at Ghoti reserve to fishing at Lim Donpet Reserves\n```\n:::\n\n\nComparison of vessel count per port per week before and after SS got caught 14 May 2035 - Monday, Friday - 18 May 2035\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_v_activity_bef_count <- fish_v_activity_bef %>%\n  group_by(start_date, area) %>%\n  summarize(fish_dist_count_bef = n_distinct(vessel_id)) %>% \n  group_by(area) %>% \n  summarize (fish_dist_total_bef = sum(fish_dist_count_bef))\n\n# check day diff - if inclusive / exclusive of date_caught +/- 1 days\n\ndays_bef <- difftime(date_caught, min(fish_v_activity_bef$start_date),  units = \"days\") #102 days --> /7 for weeks\ndays_aft <- difftime(max(fish_v_activity_aft$start_date), date_caught, units = \"days\") #199 days \n\nfish_v_activity_aft_count <- fish_v_activity_aft %>%\n  group_by(start_date, area) %>%\n  summarize(fish_dist_count_aft = n_distinct(vessel_id)) %>% \n  group_by(area) %>% \n  summarize (fish_dist_total_aft = sum(fish_dist_count_aft)) \n\nfish_v_count_bef_aft <- left_join(fish_v_activity_bef_count, fish_v_activity_aft_count, by = c(\"area\" = \"area\"))\nfish_v_count_bef_aft <- fish_v_count_bef_aft %>% \n  mutate(fish_dist_total_bef_weeks = (fish_dist_total_bef / as.numeric(days_bef))*7, \n          fish_dist_total_aft_weeks = (fish_dist_total_aft/ as.numeric(days_aft))*7) %>% \n  mutate(diff_count_bef_aft = fish_dist_total_bef_weeks - fish_dist_total_aft_weeks) %>% \n  arrange(diff_count_bef_aft)\n\nggplot(fish_v_count_bef_aft, aes(x= area, y = diff_count_bef_aft)) + geom_bar(stat = \"identity\")\n```\n:::\n\n\nComparison of vessel that had drastic switch in route - different location (delta from paste route location and new route location)\n\nComparison of cargo breakdown\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntx_qty_bef <- tx_qty1 %>% filter(tx_date <= date_caught)\ntx_qty_aft <- tx_qty1 %>% filter(tx_date > date_caught)\n\n# Calculate median quantity of fish per port \ntx_qty_bef_sum <- tx_qty_bef %>% \n  group_by(dest, fish_species) %>%\n  summarize(qty_tons_bef_sum = sum(qty_tons), cargo_bef_count = n())\n\ntx_qty_aft_sum <- tx_qty_aft %>%\n  group_by(dest, fish_species) %>%\n  summarize(qty_tons_aft_sum = sum(qty_tons), cargo_aft_count = n())\n\ntx_qty_bef_aft <- left_join(tx_qty_aft_sum, tx_qty_bef_sum, by = c(\"dest\" = \"dest\", \"fish_species\" = \"fish_species\"))\n\ncolnames(tx_qty_bef_aft)\n\n# adjustment to per week\ntx_qty_bef_aft <- tx_qty_bef_aft %>% \n  mutate(qty_tons_aft_sum_week = (qty_tons_aft_sum / as.numeric(days_aft))*7,\n        cargo_aft_count_week = (cargo_aft_count / as.numeric(days_aft))*7, \nqty_tons_bef_sum_week = (qty_tons_bef_sum / as.numeric(days_bef))*7,\ncargo_bef_count_week = (cargo_bef_count / as.numeric(days_bef))*7) #, \n\n# include assign 0 to NA values + calculate differentials \n# qty_tons_bef_aft_week = qty_tons_bef_sum_week - qty_tons_aft_sum_week, \n# cargo_count_bef_aft_week = cargo_bef_count_week - cargo_aft_count_week)\n\ntx_count_bef_aft <- ggplot(tx_qty_bef_aft, aes(x= dest, y = diff_count_bef_aft)) + geom_bar(stat = \"identity\")\n```\n:::\n\n\n#### Quantity of cargo per city\n\n### Network Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# E_Tping_c_Fishing <- E_Tping_c %>%\n#   left_join(N_vessel %>% select(vessel_id, vessel_type, vessel_company), by = \"vessel_id\") %>%\n#   filter(vessel_type == \"Fishing\")\n# \n# edges <- data.frame(\n#   from = E_Tping_c_Fishing$vessel_company,\n#   to = E_Tping_c_Fishing$ping_source\n# )\n# \n# # Create a graph object\n# graph <- graph_from_data_frame(edges, directed = FALSE)\n# \n# # Plot the network\n# plot(graph, vertex.size=10, vertex.label.cex=0.8, vertex.label.color=\"black\",\n#      main=\"Network Visualization of Boats Movement\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# E_Tping_c_Fishing_SS <- E_Tping_c_Fishing %>%\n#   filter(vessel_company == \"SouthSeafood Express Corp\")\n# \n# edges_ss <- data.frame(\n#   from = E_Tping_c_Fishing_SS$vessel_company,\n#   to = E_Tping_c_Fishing_SS$ping_source\n# )\n# \n# # Create a graph object\n# graph_ss <- graph_from_data_frame(edges_ss, directed = FALSE)\n# \n# \n# # Create a vertex attribute to distinguish between boats, SouthSeafood, and other companies\n# V(graph_ss)$type <- ifelse(V(graph_ss)$name == \"SouthSeafood Express Corp\", \"southseafood\", \n#                         ifelse(V(graph)$name %in% E_Tping_c_Fishing_SS$vessel_id, \"boat\", \"location\"))\n# \n# # Plot the network with ggraph\n# ggraph(graph_ss, layout = 'fr') +  # 'fr' layout (Fruchterman-Reingold) to spread nodes nicely\n#   geom_edge_link(aes(width = 1), edge_colour = \"grey\") +  # Add edges with grey color\n#   geom_node_point(aes(color = type), size = 5) +  # Add nodes with different colors based on type\n#   geom_node_text(aes(label = name), repel = TRUE, size = 3, color = \"black\") +  # Add labels with repulsion\n#   scale_color_manual(values = c(\"boat\" = \"orange\", \"location\" = \"blue\", \"southseafood\" = \"red\")) +  # Define custom colors\n#   theme_void() +  # Use a void theme to remove background grid\n#   labs(title = \"Network Visualization of Boats Movement\")  # Add title\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}